// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model CulturalEvent {
//   id          Int      @id @default(autoincrement())
//   eventName   String
//   date        DateTime
//   description String
//   signedUp    Boolean
// }

// model Question {
//   id            Int      @id @default(autoincrement())
//   StudentId     Int
//   QuestionAsked String
//   Date          DateTime
//   Answer        String?
//   Solved        Boolean
// }

// model GoingAwayForm {
//   id              Int      @id @default(autoincrement())
//   Name            String
//   Location        String
//   DepartureDate   DateTime
//   ReturnDate      DateTime
//   GoingFormFilled Boolean
//   FullName        String
//   StudentId       String
//   PhoneNumber     String
//   Purpose         String
// }

// model User {
//   id                       Int    @id @default(autoincrement())
//   fname                    String
//   lname                    String
//   email                    String @unique
//   password                 String
//   dob                      String
//   address                  String
//   gender                   String
//   bloodGroup               String
//   dietaryPreference        String
//   emergencyContactName     String
//   emergencyContactNumber   String
//   emergencyContactRelation String
// }

// model PasswordResetToken {
//   id        Int      @id @default(autoincrement())
//   token     Int
//   email     String
//   expires   DateTime
//   createdAt DateTime @default(now())
// }

// model Admin {
//   id       Int    @id @default(autoincrement())
//   email    String @unique
//   password String
// }

// model Role {
//   id          Int          @id @default(autoincrement())
//   name        String
//   permissions Permission[]
//   users       AdminUser[]  @relation("UserRoles")
// }

// model Permission {
//   id      Int    @id @default(autoincrement())
//   action  String
//   subject String
//   roleId  Int
//   role    Role   @relation(fields: [roleId], references: [id])
// }

// model AdminUser {
//   id       Int    @id @default(autoincrement())
//   fname    String
//   lname    String
//   email    String @unique
//   password String
//   roles    Role[] @relation("UserRoles")
// }

// model File {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   pageId    String?  @db.Text
//   file      String?  @db.Text
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CulturalEvent {
  id          Int      @id @default(autoincrement())
  eventName   String
  date        DateTime
  description String
  signedUp    Boolean
  userId      Int
  user        User[]
  StudentEvents StudentEvents[]
  
  // user        User     @relation(fields: [userId], references: [id])
}

model StudentEvents{
   id          Int      @id @default(autoincrement())
   studentId  Int
   eventId    Int
   student   User   @relation(fields: [studentId],references: [id])
   event    CulturalEvent @relation(fields: [eventId],references: [id])


}

model viewAccomodation {
  id                    Int      @id @default(autoincrement())
  roomNumber            Int
  buildingName          String
  floor                 String
  isSingleOccupancy     Boolean
  numberOfRoommates     Int
  roommateNames         String
  userId                Int
  user                  User     @relation(fields: [userId], references: [id])
  StudentAccomodation StudentAccomodation[]
}

model StudentAccomodation{
   id          Int      @id @default(autoincrement())
   studentId  Int
   accomodationId    Int
   student   User   @relation(fields: [studentId],references: [id])
   accomodation   viewAccomodation @relation(fields: [accomodationId],references: [id])
}


model Course {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  keyDates       String
  events         String
  agreements     String
  user                  User[]
  StudentCourse       StudentCourse[]
  
}

model StudentCourse{
   id          Int      @id @default(autoincrement())
   studentId  Int
   courseId    Int
   student   User   @relation(fields: [studentId],references: [id])
   course    Course @relation(fields: [courseId],references: [id])
}

model Question {
  id            Int      @id @default(autoincrement())
  StudentId     Int
  QuestionAsked String
  Date          DateTime
  Answer        String?
  Solved        Boolean
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
}

model GoingAwayForm {
  id              Int      @id @default(autoincrement())
  Name            String
  Location        String
  DepartureDate   DateTime
  ReturnDate      DateTime
  GoingFormFilled Boolean
  FullName        String
  StudentId       String
  PhoneNumber     String
  Purpose         String
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
}

model User {
  id                       Int                  @id @default(autoincrement())
  fname                    String
  lname                    String
  email                    String               @unique
  password                 String
  dob                      String
  address                  String
  gender                   String
  bloodGroup               String
  dietaryPreference        String
  emergencyContactName     String
  emergencyContactNumber   String
  emergencyContactRelation String
  imageUrl                  String? 
  CulturalEvents           CulturalEvent[]
  viewAccomodation         viewAccomodation[]
  Course                   Course[]
  Questions                Question[]
  GoingAwayForms           GoingAwayForm[]
  PasswordResetTokens      PasswordResetToken[]
  AdminUsers               AdminUser[]
  File                     File[]
  StudentEvents          StudentEvents[]
  StudentAccomodation   StudentAccomodation[]
  StudentCourse         StudentCourse[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     Int
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       AdminUser[]  @relation("UserRoles")
}

model Permission {
  id      Int    @id @default(autoincrement())
  action  String
  subject String
  roleId  Int
  role    Role   @relation(fields: [roleId], references: [id])
}

model AdminUser {
  id       Int    @id @default(autoincrement())
  fname    String
  lname    String
  email    String @unique
  password String
  roles    Role[] @relation("UserRoles")
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String?  @db.Text
  file      String?  @db.Text
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
