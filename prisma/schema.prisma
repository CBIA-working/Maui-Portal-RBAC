generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                     @id @default(autoincrement())
  fname                    String
  lname                    String
  email                    String                  @unique
  password                 String
  dob                      String
  address                  String
  gender                   String
  bloodGroup               String
  dietaryPreference        String
  emergencyContactName     String
  emergencyContactNumber   String
  emergencyContactRelation String
  imageUrl                 String?
  StudentAccomodation      StudentAccomodation[]
  StudentCourse            StudentCourse[]
  StudentEvents            StudentEvents[]
  StudentKeyProgramDate    StudentKeyProgramDate[]
  AdminUsers               AdminUser[]             @relation("AdminUserTokenToUser")
  Course                   Course[]                @relation("CourseToUser")
  CulturalEvents           CulturalEvent[]         @relation("CulturalEventToUser")
  File                     File[]                  @relation("FileToUser")
  GoingAwayForms           GoingAwayForm[]         @relation("GoingAwayFormToUser")
  KeyProgramDate           KeyProgramDate[]        @relation("KeyProgramDateToUser")
  PasswordResetTokens      PasswordResetToken[]    @relation("PasswordResetTokenToUser")
  Questions                Question[]              @relation("QuestionToUser")
  viewAccomodation         viewAccomodation[]      @relation("viewAccomodationToUser")
}

model CulturalEvent {
  id            Int             @id @default(autoincrement())
  eventName     String
  date          String
  description   String
  signedUp      Boolean
  StudentEvents StudentEvents[]
  user          User[]          @relation("CulturalEventToUser")
}

model StudentEvents {
  id        Int           @id @default(autoincrement())
  studentId Int
  eventId   Int
  event     CulturalEvent @relation(fields: [eventId], references: [id])
  student   User          @relation(fields: [studentId], references: [id])
}

model viewAccomodation {
  id                  Int                   @id @default(autoincrement())
  roomNumber          Int
  buildingName        String
  floor               String
  isSingleOccupancy   Boolean
  numberOfRoommates   Int
  roommateNames       String
  StudentAccomodation StudentAccomodation[]
  user                User[]                @relation("viewAccomodationToUser")
}

model StudentAccomodation {
  id             Int              @id @default(autoincrement())
  studentId      Int
  accomodationId Int
  accomodation   viewAccomodation @relation(fields: [accomodationId], references: [id])
  student        User             @relation(fields: [studentId], references: [id])
}

model Course {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  events        String
  agreements    String
  keyDates      String
  StudentCourse StudentCourse[]
  user          User[]          @relation("CourseToUser")
}

model StudentCourse {
  id        Int    @id @default(autoincrement())
  studentId Int
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
  student   User   @relation(fields: [studentId], references: [id])
}

model KeyProgramDate {
  id                    Int                     @id @default(autoincrement())
  date                  DateTime
  name                  String
  description           String
  time                  String
  StudentKeyProgramDate StudentKeyProgramDate[]
  user                  User[]                  @relation("KeyProgramDateToUser")
}

model StudentKeyProgramDate {
  id               Int            @id @default(autoincrement())
  studentId        Int
  keyProgramDateId Int
  keyProgramDate   KeyProgramDate @relation(fields: [keyProgramDateId], references: [id])
  student          User           @relation(fields: [studentId], references: [id])
}

model Faq {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  sortOrder   Int 
}

model Question {
  id            Int      @id @default(autoincrement())
  StudentId     Int
  QuestionAsked String
  Date          DateTime
  Answer        String?
  Solved        Boolean
  user          User[]   @relation("QuestionToUser")
}

model GoingAwayForm {
  id              Int      @id @default(autoincrement())
  Name            String
  Location        String
  DepartureDate   DateTime
  ReturnDate      DateTime
  FullName        String
  StudentId       String
  PhoneNumber     String
  Purpose         String
  GoingFormFilled Boolean
  user            User[]   @relation("GoingAwayFormToUser")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  createdAt DateTime @default(now())
  expires   DateTime
  token     Int
  user      User[]   @relation("PasswordResetTokenToUser")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  users       AdminUser[]  @relation("UserRoles")
}

model Permission {
  id      Int    @id @default(autoincrement())
  action  String
  subject String
  roleId  Int
  role    Role   @relation(fields: [roleId], references: [id])
}

model AdminUser {
  id       Int    @id @default(autoincrement())
  fname    String
  lname    String
  email    String @unique
  password String
  user     User[] @relation("AdminUserTokenToUser")
  roles    Role[] @relation("UserRoles")
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String?
  file      String?
  user      User[]   @relation("FileToUser")
}
