generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                       Int     @id @default(autoincrement())
  email                    String  @unique
  password                 String
  address                  String
  bloodGroup               String
  dietaryPreference        String
  dob                      String
  emergencyContactName     String
  emergencyContactNumber   String
  emergencyContactRelation String
  fname                    String
  gender                   String
  imageUrl                 String?
  lname                    String
  token                    String?
  AdminStudent             AdminStudent[]
  AdminRole                AdminRole[]
  Role                     Role[]           @relation("RoleToAdmin")
}

model AdminStudent {
  id        Int     @id @default(autoincrement())
  studentId Int
  AdminId   Int
  Admin     Admin @relation(fields: [AdminId], references: [id])
  student   User    @relation(fields: [studentId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  roleName    String       @unique
  permissions Permission[]
  AdminRole   AdminRole[]
  Admin       Admin[]           @relation("RoleToAdmin")
}

model AdminRole {
  id        Int     @id @default(autoincrement())
  RoleId    Int
  AdminId   Int
  Role      Role @relation(fields: [RoleId], references: [id])
  Admin     Admin    @relation(fields: [AdminId], references: [id])
}

model Permission {
  id       Int    @id @default(autoincrement())
  type     String
  roleId   Int
  pageName String
  role     Role   @relation(fields: [roleId], references: [id])
}


model User {
  id                       Int                     @id @default(autoincrement())
  fname                    String
  lname                    String
  email                    String                  @unique
  password                 String
  dob                      String
  address                  String
  gender                   String
  bloodGroup               String
  dietaryPreference        String
  emergencyContactName     String
  emergencyContactNumber   String
  emergencyContactRelation String
  imageUrl                 String?
  token                    String?
  StudentAccomodation      StudentAccomodation[]
  StudentCourse            StudentCourse[]
  StudentEvents            StudentEvents[]
  StudentKeyProgramDate    StudentKeyProgramDate[]
  StudentLibrary           StudentLibrary[]
  StudentProgram           StudentProgram[]
  StudentTasks             StudentTasks[]
  StudentTrip              StudentTrip[]
  AdminStudent             AdminStudent[]
  Book                     Book[]                  @relation("BookToUser")
  Course                   Course[]                @relation("CourseToUser")
  CulturalEvents           CulturalEvent[]         @relation("CulturalEventToUser")
  File                     File[]                  @relation("FileToUser")
  GoingAwayForms           GoingAwayForm[]         @relation("GoingAwayFormToUser")
  KeyProgramDate           KeyProgramDate[]        @relation("KeyProgramDateToUser")
  Library                  Library[]               @relation("LibraryToUser")
  PasswordResetTokens      PasswordResetToken[]    @relation("PasswordResetTokenToUser")
  Program                  Program[]               @relation("ProgramToUser")
  Questions                Question[]              @relation("QuestionToUser")
  Tasks                    Tasks[]                 @relation("TasksToUser")
  trip                     Trip[]                  @relation("TripToUser")
  viewAccomodation         viewAccomodation[]      @relation("viewAccomodationToUser")
}

model Program {
  id             Int              @id @default(autoincrement())
  name           String
  batch          String
  archived       Boolean          @default(false)
  fullForm       String
  CourseProgram  CourseProgram[]
  LibraryProgram LibraryProgram[]
  StudentProgram StudentProgram[]
  user           User[]           @relation("ProgramToUser")
}

model StudentProgram {
  id        Int     @id @default(autoincrement())
  studentId Int
  ProgramId Int
  Program   Program @relation(fields: [ProgramId], references: [id])
  student   User    @relation(fields: [studentId], references: [id])
}

model CourseProgram {
  id        Int     @id @default(autoincrement())
  courseId  Int
  ProgramId Int
  Program   Program @relation(fields: [ProgramId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
}

model CulturalEvent {
  id            Int             @id @default(autoincrement())
  eventName     String
  date          String
  description   String
  signedUp      Boolean
  StudentEvents StudentEvents[]
  user          User[]          @relation("CulturalEventToUser")
}

model StudentEvents {
  id        Int           @id @default(autoincrement())
  studentId Int
  eventId   Int
  event     CulturalEvent @relation(fields: [eventId], references: [id])
  student   User          @relation(fields: [studentId], references: [id])
}

model viewAccomodation {
  id                  Int                   @id @default(autoincrement())
  roomNumber          Int
  buildingName        String
  floor               String
  isSingleOccupancy   Boolean
  numberOfRoommates   Int
  roommateNames       String
  hostfamily          String?
  roommateNumber      String?
  agreement1          Boolean               @default(false)
  agreement2          Boolean               @default(false)
  agreement3          Boolean               @default(false)
  StudentAccomodation StudentAccomodation[]
  user                User[]                @relation("viewAccomodationToUser")
}

model StudentAccomodation {
  id             Int              @id @default(autoincrement())
  studentId      Int
  accomodationId Int
  accomodation   viewAccomodation @relation(fields: [accomodationId], references: [id])
  student        User             @relation(fields: [studentId], references: [id])
}

model Course {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  events        String
  agreements    String
  keyDates      String
  CourseProgram CourseProgram[]
  StudentCourse StudentCourse[]
  user          User[]          @relation("CourseToUser")
}

model StudentCourse {
  id        Int    @id @default(autoincrement())
  studentId Int
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
  student   User   @relation(fields: [studentId], references: [id])
}

model KeyProgramDate {
  id                    Int                     @id @default(autoincrement())
  date                  DateTime
  name                  String
  description           String
  time                  String
  StudentKeyProgramDate StudentKeyProgramDate[]
  user                  User[]                  @relation("KeyProgramDateToUser")
}

model StudentKeyProgramDate {
  id               Int            @id @default(autoincrement())
  studentId        Int
  keyProgramDateId Int
  keyProgramDate   KeyProgramDate @relation(fields: [keyProgramDateId], references: [id])
  student          User           @relation(fields: [studentId], references: [id])
}

model Faq {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  order       Int?
}

model Trip {
  id              Int           @id @default(autoincrement())
  TripName        String
  Location        String
  DepartureDate   DateTime
  ReturnDate      DateTime
  FullName        String
  Purpose         String
  GoingFormFilled Boolean
  StudentId       Int
  PhoneNumber     String
  StudentTrip     StudentTrip[]
  user            User[]        @relation("TripToUser")
}

model StudentTrip {
  id        Int  @id @default(autoincrement())
  studentId Int
  tripId    Int
  student   User @relation(fields: [studentId], references: [id])
  trip      Trip @relation(fields: [tripId], references: [id])
}

model Marker {
  id       Int    @id @default(autoincrement())
  position Json
  label    String
  info     String
}

model OrientationFile {
  id             Int    @id @default(autoincrement())
  Name           String
  Description    String
  OrientationPdf String
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String?
  file      String?
  name      String?
  user      User[]   @relation("FileToUser")
}

model Library {
  id             Int              @id @default(autoincrement())
  Name           String
  Description    String
  Status         String
  LibraryPdf     String
  LibraryProgram LibraryProgram[]
  StudentLibrary StudentLibrary[]
  user           User[]           @relation("LibraryToUser")
}

model Book {
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String?
  file      String?
  id        Int      @id @default(autoincrement())
  user      User[]   @relation("BookToUser")
}

model StudentLibrary {
  id        Int     @id @default(autoincrement())
  studentId Int
  libraryId Int
  Library   Library @relation(fields: [libraryId], references: [id])
  student   User    @relation(fields: [studentId], references: [id])
}

model LibraryProgram {
  id        Int     @id @default(autoincrement())
  libraryId Int
  programId Int
  Library   Library @relation(fields: [libraryId], references: [id])
  program   Program @relation(fields: [programId], references: [id])
}

model Tasks {
  id           Int            @id @default(autoincrement())
  name         String
  date         DateTime
  status       Boolean
  FullName     String
  StudentId    Int
  StudentTasks StudentTasks[]
  user         User[]         @relation("TasksToUser")
}

model StudentTasks {
  id        Int   @id @default(autoincrement())
  studentId Int
  taskId    Int
  student   User  @relation(fields: [studentId], references: [id])
  task      Tasks @relation(fields: [taskId], references: [id])
}

model Question {
  id            Int      @id @default(autoincrement())
  StudentId     Int
  QuestionAsked String
  Date          DateTime
  Answer        String?
  Solved        Boolean
  user          User[]   @relation("QuestionToUser")
}

model GoingAwayForm {
  id              Int      @id @default(autoincrement())
  Name            String
  Location        String
  DepartureDate   DateTime
  ReturnDate      DateTime
  FullName        String
  StudentId       String
  PhoneNumber     String
  Purpose         String
  GoingFormFilled Boolean
  user            User[]   @relation("GoingAwayFormToUser")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  createdAt DateTime @default(now())
  expires   DateTime
  token     Int
  user      User[]   @relation("PasswordResetTokenToUser")
}
